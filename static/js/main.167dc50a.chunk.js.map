{"version":3,"sources":["modules/countries.js","components/Header.jsx","components/Main.jsx","components/App.jsx","index.js"],"names":["getCountries","a","fetch","json","data","countriesData","item","obj","country","name","common","coords","lat","latlng","lng","push","sort","b","localeCompare","console","log","message","getWeather","pick","getPicture","weather","day","photos","value","unplashURL","results","urls","small","Header","countryPicked","inputRef","useRef","className","action","onChange","selectElement","current","ref","map","x","Main","Object","keys","length","src","alt","App","useState","countries","setCountries","isLoading","setIsLoading","setWeather","fillState","useEffect","handlePick","find","Fragment","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAAMA,EAAY,uCAAG,sCAAAC,EAAA,+EAEaC,MAAM,sCAFnB,8BAE0DC,OAF1D,OAEPC,EAFO,OAGTC,EAAgB,GAHP,cAIID,GAJJ,IAIb,2BAASE,EAAc,QACfC,EAAM,CACVC,QAASF,EAAKG,KAAKC,OACnBC,OAAQ,CACJC,IAAKN,EAAKO,OAAO,GACjBC,IAAKR,EAAKO,OAAO,KAGrBR,EAAcU,KAAKR,GAZV,qCAcbF,EAAcW,MAAK,SAACf,EAAGgB,GAAJ,OAAUhB,EAAEO,QAAQU,cAAcD,EAAET,YAd1C,kBAeNH,GAfM,kCAiBbc,QAAQC,IAAI,KAAIC,SAjBH,0DAAH,qDAoBZC,EAAU,uCAAG,WAAOC,GAAP,eAAAtB,EAAA,sEAYGuB,EAAWD,EAAKf,SAZnB,0BASTiB,EATS,CAUXC,IAAK,SACLD,QAAS,OACTE,OAZW,wBAcRF,GAdQ,2CAAH,sDAgBVD,EAAU,uCAAG,WAAOI,GAAP,iBAAA3B,EAAA,6DACT4B,EADS,8DAC2DD,EAD3D,mKAGW1B,MAAM2B,GAHjB,8BAG8B1B,OAH9B,cAGTC,EAHS,yBAIRA,EAAK0B,QAAQ,GAAGC,KAAKC,OAJb,2CAAH,sD,OCbDC,MArBf,YAAwC,IAAvB7B,EAAsB,EAAtBA,KAAM8B,EAAgB,EAAhBA,cACbC,EAAWC,mBAKjB,OACI,yBAAQC,UAAU,SAAlB,UACI,yCACA,sBAAMC,OAAO,SAAb,SACI,yBAAQ7B,KAAK,oBAAoB8B,SARxB,WACjB,IAAMC,EAAgBL,EAASM,QAC/BP,EAAcM,EAAcZ,QAMqCc,IAAKP,EAA9D,UACI,wBAAQP,MAAM,0BAAd,qCACCxB,EAAKuC,KAAI,SAAAC,GAAC,OACP,wBAAQhB,MAAOgB,EAAEpC,QAAjB,SAA2BoC,EAAEpC,sBCAtCqC,MAff,YAA0B,IAAXpB,EAAU,EAAVA,QAEX,OADAN,QAAQC,IAAIK,GAER,sBAAMY,UAAU,OAAhB,SACqC,IAAhCS,OAAOC,KAAKtB,GAASuB,OAClB,oDACA,sBAAKX,UAAU,YAAf,UACI,qBAAKY,IAAKxB,EAAQE,OAAQuB,IAAI,KAC9B,4BAAIzB,EAAQA,gBC6BjB0B,MA/Bf,WAAgB,IAAD,EAEqBC,qBAFrB,mBAENC,EAFM,KAEKC,EAFL,OAGqBF,oBAAS,GAH9B,mBAGNG,EAHM,KAGKC,EAHL,OAIiBJ,mBAAS,IAJ1B,mBAIN3B,EAJM,KAIGgC,EAJH,KAMPC,EAAS,uCAAG,sBAAAzD,EAAA,kEAChBqD,EADgB,SACGtD,IADH,kCAEhBwD,GAAa,GAFG,2CAAH,qDAIfG,qBAAU,WACRD,MACC,IAEH,IAAME,EAAU,uCAAG,WAAOhC,GAAP,iBAAA3B,EAAA,6DACXsB,EAAO8B,EAAUQ,MAAK,SAAAjB,GAAC,OAAIA,EAAEpC,UAAYoB,KAD9B,SAEKN,EAAWC,GAFhB,OAEXE,EAFW,OAGjBgC,EAAWhC,GAHM,2CAAH,sDAMhB,OACE,eAAC,IAAMqC,SAAP,YACIP,GAAa,cAAC,EAAD,CAAQnD,KAAMiD,EAAWnB,cAAe0B,IAEvD,cAAC,EAAD,CAAMnC,QAASA,IACf,gDC3BNsC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.167dc50a.chunk.js","sourcesContent":["const getCountries = async () => {\n    try {\n        const data = await (await fetch('https://restcountries.com/v3.1/all')).json();\n        let countriesData = [];\n        for (let item of data) {\n            let obj = {\n            country: item.name.common,\n            coords: {\n                lat: item.latlng[0],\n                lng: item.latlng[1]\n            }\n            }\n            countriesData.push(obj);\n        }\n        countriesData.sort((a, b) => a.country.localeCompare(b.country));\n        return countriesData;\n    } catch(err) {\n        console.log(err.message);\n    }\n}\nconst getWeather = async (pick) => {\n    /* const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${pick.coords.lat}&lon=${pick.coords.lng}&exclude=hourly,daily&appid={37455216f4de62aa6e8beba09934433a}`;\n    try {\n        const data = await (await fetch(url)).json();\n        console.log(url);\n        console.log('getting da weather', data);\n    } catch(err) {\n        console.log(err.message);\n    } */\n    const weather = {\n        day: 'monday',\n        weather: 'rain',\n        photos: await getPicture(pick.country)\n    }\n    return weather\n}\nconst getPicture = async (value) => {\n    const unplashURL = `https://api.unsplash.com/search/photos?page=1&query=${value}&client_id=dqpkUmz79LDIjBojkNgpJP-H_ppG-CIylVrSYzeajfU`;\n    const test = `https://api.unsplash.com/photos/?client_id=dqpkUmz79LDIjBojkNgpJP-H_ppG-CIylVrSYzeajfU/random`;\n    const data = await (await fetch(unplashURL)).json();\n    return data.results[0].urls.small\n}\n\nexport {getCountries, getWeather};","import {useRef} from 'react';\n\nfunction Header({data, countryPicked}) {\n    const inputRef = useRef();\n    const handleChange = () => {\n        const selectElement = inputRef.current;\n        countryPicked(selectElement.value);\n    }\n    return ( \n        <header className=\"header\">\n            <h1>Weather</h1>\n            <form action=\"submit\">\n                <select name=\"country selection\" onChange={handleChange} ref={inputRef} >\n                    <option value=\"Please select a country\">Please select a country</option>\n                    {data.map(x => \n                        <option value={x.country}>{x.country}</option>\n                        )}\n                </select>\n            </form>\n        </header>\n    );\n}\n\nexport default Header;","function Main({weather}) {\n    console.log(weather)\n    return ( \n        <main className=\"main\">\n            {Object.keys(weather).length === 0 ?\n                <p>No country selected</p>:\n                <div className=\"container\">\n                    <img src={weather.photos} alt=\"\" />\n                    <p>{weather.weather}</p>\n                </div>\n            }\n        </main>\n    );\n}\n\nexport default Main;","import '../style/index.css';\nimport React, {useEffect, useState} from 'react';\nimport {getCountries, getWeather} from '../modules/countries';\nimport Header from './Header.jsx';\nimport Main from './Main.jsx';\n\nfunction App() {\n\n  const [countries, setCountries] = useState();  \n  const [isLoading, setIsLoading] = useState(true);\n  const [weather, setWeather] = useState({});\n\n  const fillState = async () => {\n    setCountries(await getCountries());\n    setIsLoading(false);\n  }\n  useEffect(() => {\n    fillState();\n  }, []);\n\n  const handlePick = async (value) => {\n    const pick = countries.find(x => x.country === value);\n    const weather = await getWeather(pick);\n    setWeather(weather);\n  }\n\n  return (\n    <React.Fragment>\n      {!isLoading && <Header data={countries} countryPicked={handlePick} />}\n      \n      <Main weather={weather} />\n      <footer>Footer</footer>\n    </React.Fragment>\n  );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}